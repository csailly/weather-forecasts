#!/usr/bin/env node
/**
 * Created from https://github.com/expressjs/generator/blob/d07ce53595086dd07efb100279a7b7addc059418/templates/js/www
 */

// ***IMPORTANT**: The following line should be added to the very
//                 beginning of your main script!
require('app-module-path').addPath(__dirname + '/../src/app/')

/**
 * Module dependencies.
 */
const http = require('http')
const debug = require('debug')('weather:server')
const app = require('../src/')
const getPort = require('get-port')
const config = require('config/')

/**
 * Get port from environment
 */
getPort({ port: normalizePort(config.port || '3000') }).then(port => {
  /**
   *  Store in Express.
   */
  app.set('port', port)

  /**
 * Create HTTP server.
 */
  const server = http.createServer(app)

  /**
 * Event listener for HTTP server "error" event.
 */
  function onError(error) {
    if (error.syscall !== 'listen') throw error

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
      case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
      default:
        throw error
    }
  }

  /**
 * Event listener for HTTP server "listening" event.
 */
  function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
  }

  /**
 * Listen on provided port, on all network interfaces.
 */
  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
})

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  // named pipe
  if (isNaN(port)) return val

  // port number
  if (port >= 0) return port

  return false
}
